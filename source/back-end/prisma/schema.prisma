generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                String        @id @default(uuid())
  name              String?       @default("Usuário")
  birthdate         DateTime?
  email             String        @unique
  phone             String?       @unique
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  googleId          String?       @unique @map("google_id")
  registerCompleted Boolean       @default(false) @map("register_completed")
  profilePhotoUrl   String?
  referralCount     Int           @default(0) @map("referral_count")
  referrerId        String?       @map("referrer_id")
  userType          UserType      @default(CUSTOMER) @map("user_type")
  appointments      Appointment[]
  referrer          Customer?     @relation("refers", fields: [referrerId], references: [id])
  referrals         Customer[]    @relation("refers")

  @@index([referrerId], map: "customer_referrer_id_fkey")
  @@map("customer")
}

model Appointment {
  id               String         @id @default(uuid())
  observation      String?
  status           Status         @default(PENDING)
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  customerId       String         @map("customer_id")
  appointmentDate  DateTime       @map("appointment_date")
  serviceOfferedId String         @map("service_id")
  rating           Rating?
  customer         Customer       @relation(fields: [customerId], references: [id])
  offer            Offer          @relation(fields: [serviceOfferedId], references: [id])
  notifications    Notification[]

  @@index([customerId], map: "appointment_customer_id_fkey")
  @@index([serviceOfferedId], map: "appointment_service_id_fkey")
  @@map("appointment")
}

model Rating {
  id            String      @id @default(uuid())
  score         Int         @default(1)
  comment       String?
  createdAt     DateTime    @default(now()) @map("created_at")
  appointmentId String      @unique @map("appointment_id")
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model Notification {
  id            String      @id @default(uuid())
  readAt        DateTime?   @map("read_at")
  createdAt     DateTime    @default(now()) @map("created_at")
  appointmentId String      @map("appointment_id")
  message       String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@index([appointmentId], map: "notification_appointment_id_fkey")
  @@map("notification")
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  offers      Offer[]

  @@map("service")
}

model Offer {
  id            String        @id @default(uuid())
  estimatedTime Int           @map("estimated_time")
  price         Decimal       @db.Decimal(10, 2)
  serviceId     String        @map("service_id")
  employeeId    String        @map("employee_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  isOffering    Boolean       @default(false) @map("is_offering")
  appointments  Appointment[]
  employee      Employee      @relation(fields: [employeeId], references: [id])
  service       Service       @relation(fields: [serviceId], references: [id])

  @@index([employeeId], map: "offer_employee_id_fkey")
  @@index([serviceId], map: "offer_service_id_fkey")
  @@map("offer")
}

model Employee {
  id                String         @id @default(uuid())
  name              String?        @default("Usuário")
  email             String         @unique
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  contact           String?        @unique
  socialMedia       Json?          @map("social_media")
  googleId          String?        @unique @map("google_id")
  registerCompleted Boolean        @default(false) @map("register_completed")
  specialization    String?
  profilePhotoUrl   String?        @map("profile_photo_url")
  userType          UserType       @default(EMPLOYEE) @map("user_type")
  employeeRole      EmployeeRole[]
  offers            Offer[]
  shifts            Shift[]

  @@map("employee")
}

model Shift {
  id         String   @id @default(uuid())
  weekDay    WeekDays @map("week_day")
  isBusy     Boolean  @default(false) @map("is_busy")
  shiftStart DateTime @map("shift_start")
  shiftEnd   DateTime @map("shift_end")
  employeeId String   @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId], map: "shift_employee_id_fkey")
  @@map("shift")
}

model Role {
  id             String           @id @default(uuid())
  name           String
  description    String?
  isActive       Boolean          @default(false) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  employeeRole   EmployeeRole[]
  rolePermission RolePermission[]

  @@map("role")
}

model EmployeeRole {
  id         String   @id @default(uuid())
  employeeId String   @map("employee_id")
  roleId     String   @map("role_id")
  createdAt  DateTime @default(now()) @map("created_at")
  employee   Employee @relation(fields: [employeeId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])

  @@index([employeeId], map: "employee_role_employee_id_fkey")
  @@index([roleId], map: "employee_role_role_id_fkey")
  @@map("employee_role")
}

model Permission {
  id             String           @id @default(uuid())
  screen         String
  action         Action
  description    String?
  isActive       Boolean          @default(false) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  rolePermission RolePermission[]

  @@map("permission")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@index([permissionId], map: "role_permission_permission_id_fkey")
  @@index([roleId], map: "role_permission_role_id_fkey")
  @@map("role_permission")
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum UserType {
  MANAGER
  CUSTOMER
  EMPLOYEE
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  FINISHED
  NO_SHOW
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}
