name: Continuous Deployment Pipeline

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

concurrency:
  group: 'cd-production'
  cancel-in-progress: true


jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: PRODUCTION
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract version from tag
        id: version
        run: |
          version="${GITHUB_REF_NAME#v}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "VersÃ£o detectada: $version"

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate .env for front-end
        run: |
          echo "Creating .env file for front-end"
          rm -f source/front-end/.env
          for var in $(printenv | grep ^FRONTEND_ | awk -F= '{print $1}'); do
            key="${var#FRONTEND_}"
            echo "$key=${!var}" >> source/front-end/.env
          done

      - name: Build & Push Docker image via Makefile
        run: |
          make push TAG=${{ steps.version.outputs.version }} LATEST=true
    
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build_and_push
    environment: PRODUCTION
    if: startsWith(github.ref, 'refs/tags/')
    env:
      # Hosts and SSH details
      PRIVATE_HOST: ${{ secrets.PRIVATE_HOST }}
      PUBLIC_HOST: ${{ secrets.PUBLIC_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY_PATH: source/infra/ansible/id_rsa
      SSL_CERT_PATH: source/infra/ansible/cert.pem
      SSL_KEY_PATH: source/infra/ansible/key.pem

      # Paths to .env files on the server
      BACK_ENV_PATH: /home/ubuntu/bs-beauty/backend/.env
      FRONT_ENV_PATH: /home/ubuntu/bs-beauty/front-end/.env

      # Branch name
      REPO_BRANCH: ${{ github.ref_name }}

      # Keys & Certs
      SSH_KEY_CONTENT: ${{ secrets.SSH_KEY_CONTENT }}
      SSL_CERT_CONTENT: ${{ secrets.SSL_CERT_CONTENT }}
      SSL_KEY_CONTENT: ${{ secrets.SSL_KEY_CONTENT }}
    steps:
      - name: Set REPO_BRANCH
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "REPO_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "REPO_BRANCH=main" >> $GITHUB_ENV
          fi

      - name: Generate .env for back-end
        run: |
          echo "Creating .env file for back-end"
          rm -f source/back-end/.env
          for var in $(printenv | grep ^BACKEND_ | awk -F= '{print $1}'); do
            key="${var#BACKEND_}"
            echo "$key=${!var}" >> source/back-end/.env
          done

      - name: Generate .env for front-end
        run: |
          echo "Creating .env file for front-end"
          rm -f source/front-end/.env
          for var in $(printenv | grep ^FRONTEND_ | awk -F= '{print $1}'); do
            key="${var#FRONTEND_}"
            echo "$key=${!var}" >> source/front-end/.env
          done

      - name: Setup Ansible Secrets (keys & certs)
        run: |
          mkdir -p source/infra/ansible
          echo "$SSH_KEY_CONTENT" > source/infra/ansible/id_rsa
          echo "$SSL_CERT_CONTENT" > source/infra/ansible/cert.pem
          echo "$SSL_KEY_CONTENT" > source/infra/ansible/key.pem
          chmod 600 $SSH_KEY_PATH $SSL_CERT_PATH $SSL_KEY_PATH

      - name: Run Deploy Nginx Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/playbooks/public.yaml
          inventory: ansible/inventories/dynamic.yaml
          
      - name: Run Deploy Application Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/playbooks/private.yaml
          inventory: ansible/inventories/dynamic.yaml