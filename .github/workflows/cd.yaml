name: Continuous Deployment Pipeline

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

concurrency:
  group: 'cd-production'
  cancel-in-progress: true


jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: PRODUCTION
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract version from tag
        id: version
        run: |
          version="${GITHUB_REF_NAME}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "VersÃ£o detectada: $version"

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate .env for front-end
        env:
          FRONTEND_VITE_ENVIRONMENT: ${{ vars.FRONTEND_VITE_ENVIRONMENT }}
        run: |
          echo "Creating .env file for front-end"
          rm -f ${{ github.workspace }}/source/front-end/.env
          for var in $(printenv | grep ^FRONTEND_ | awk -F= '{print $1}'); do
            key="${var#FRONTEND_}"
            echo "$key=${!var}" >> ${{ github.workspace }}/source/front-end/.env
          done

      - name: Build & Push Docker image via Makefile
        working-directory: ${{ github.workspace }}/source/
        run: |
          make push TAG=${{ steps.version.outputs.version }} LATEST=true
    
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build_and_push
    environment: PRODUCTION
    if: startsWith(github.ref, 'refs/tags/')
    env:
      # Hosts and SSH details
      PRIVATE_HOST: ${{ vars.PRIVATE_HOST }}
      PUBLIC_HOST: ${{ vars.PUBLIC_HOST }}
      SSH_USER: ${{ vars.SSH_USER }}
      SSH_KEY_PATH: ${{ github.workspace }}/infra/ansible/id_rsa
      SSL_CERT_PATH: ${{ github.workspace }}/infra/ansible/cert.pem
      SSL_KEY_PATH: ${{ github.workspace }}/infra/ansible/key.pem

      # Paths to .env files on the server
      BACK_ENV_PATH: ${{ github.workspace }}/source/back-end/.env
      FRONT_ENV_PATH: ${{ github.workspace }}/source/front-end/.env

      # Branch name
      REPO_BRANCH: ${{ github.ref_name }}

      # Keys & Certs
      SSH_KEY_CONTENT: ${{ secrets.SSH_KEY_CONTENT }}
      SSL_CERT_CONTENT: ${{ secrets.SSL_CERT_CONTENT }}
      SSL_KEY_CONTENT: ${{ secrets.SSL_KEY_CONTENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Set REPO_BRANCH
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "REPO_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "REPO_BRANCH=main" >> $GITHUB_ENV
          fi

      - name: Generate .env for back-end
        env:
          BACKEND_COOKIE_DOMAIN: ${{ vars.BACKEND_COOKIE_DOMAIN }}
          BACKEND_DATABASE_URL: ${{ vars.BACKEND_DATABASE_URL }}
          BACKEND_EMAIL_PASSWORD: ${{ vars.BACKEND_EMAIL_PASSWORD }}
          BACKEND_EMAIL_PROVIDER: ${{ vars.BACKEND_EMAIL_PROVIDER }}
          BACKEND_EMAIL_USER: ${{ vars.BACKEND_EMAIL_USER }}
          BACKEND_GOOGLE_CLIENT_ID: ${{ vars.BACKEND_GOOGLE_CLIENT_ID }}
          BACKEND_GOOGLE_CLIENT_SECRET: ${{ vars.BACKEND_GOOGLE_CLIENT_SECRET }}
          BACKEND_GOOGLE_REDIRECT_URI: ${{ vars.BACKEND_GOOGLE_REDIRECT_URI }}
          BACKEND_GOOGLE_SCOPES: ${{ vars.BACKEND_GOOGLE_SCOPES }}
          BACKEND_JWT_EXPIRES_IN: ${{ vars.BACKEND_JWT_EXPIRES_IN }}
          BACKEND_JWT_REFRESH_EXPIRES_IN: ${{ vars.BACKEND_JWT_REFRESH_EXPIRES_IN }}
          BACKEND_JWT_SECRET: ${{ vars.BACKEND_JWT_SECRET }}
          BACKEND_NOTIFY_ASYNC_ENABLED: ${{ vars.BACKEND_NOTIFY_ASYNC_ENABLED }}
          BACKEND_NOTIFY_CONCURRENCY: ${{ vars.BACKEND_NOTIFY_CONCURRENCY }}
          BACKEND_NOTIFY_RETRY_DELAY_MS: ${{ vars.BACKEND_NOTIFY_RETRY_DELAY_MS }}
          BACKEND_REDIS_HOST: ${{ vars.BACKEND_REDIS_HOST }}
          BACKEND_REDIS_PORT: ${{ vars.BACKEND_REDIS_PORT }}
        run: |
          echo "Creating .env file for back-end"
          rm -f ${{ github.workspace }}/source/back-end/.env
          for var in $(printenv | grep ^BACKEND_ | awk -F= '{print $1}'); do
            key="${var#BACKEND_}"
            echo "$key=${!var}" >> ${{ github.workspace }}/source/back-end/.env
          done

      - name: Generate .env for front-end
        env:
          FRONTEND_VITE_ENVIRONMENT: ${{ vars.FRONTEND_VITE_ENVIRONMENT }}
        run: |
          echo "Creating .env file for front-end"
          rm -f ${{ github.workspace }}/source/front-end/.env
          for var in $(printenv | grep ^FRONTEND_ | awk -F= '{print $1}'); do
            key="${var#FRONTEND_}"
            echo "$key=${!var}" >> ${{ github.workspace }}/source/front-end/.env
          done

      - name: Setup Ansible Secrets (keys & certs)
        run: |
          mkdir -p ${{ github.workspace }}/infra/ansible
          echo "$SSH_KEY_CONTENT" > ${{ github.workspace }}/infra/ansible/id_rsa
          echo "$SSL_CERT_CONTENT" > ${{ github.workspace }}/infra/ansible/cert.pem
          echo "$SSL_KEY_CONTENT" > ${{ github.workspace }}/infra/ansible/key.pem
          chmod 600 $SSH_KEY_PATH $SSL_CERT_PATH $SSL_KEY_PATH

      - name: Run Deploy Nginx Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        env:
          PRIVATE_HOST: ${{ vars.PRIVATE_HOST }}
          PUBLIC_HOST: ${{ vars.PUBLIC_HOST }}
          SSH_USER: ${{ vars.SSH_USER }}
          SSH_KEY_PATH: ${{ github.workspace }}/infra/ansible/id_rsa
          SSL_CERT_PATH: ${{ github.workspace }}/infra/ansible/cert.pem
          SSL_KEY_PATH: ${{ github.workspace }}/infra/ansible/key.pem
        with:
          playbook: ${{ github.workspace }}/infra/ansible/playbooks/public.yaml
          options: |
            --inventory ${{ github.workspace }}/infra/ansible/inventories/dynamic.yaml
          
      - name: Run Deploy Application Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        env:
          PRIVATE_HOST: ${{ vars.PRIVATE_HOST }}
          PUBLIC_HOST: ${{ vars.PUBLIC_HOST }}
          SSH_USER: ${{ vars.SSH_USER }}
          SSH_KEY_PATH: ${{ github.workspace }}/infra/ansible/id_rsa
          BACK_ENV_PATH: ${{ github.workspace }}/source/back-end/.env
          REPO_BRANCH: ${{ github.ref_name }}
        with:
          playbook: ${{ github.workspace }}/infra/ansible/playbooks/private.yaml
          options: |
            --inventory ${{ github.workspace }}/infra/ansible/inventories/dynamic.yaml